'use strict';

// Array

// 1. Declaration
const arr1 = new Array();
const arr2 = [1, 2];

// 2. Index position
const fruits = ['üçâ', 'üçá'];
console.log(fruits);
console.log(fruits.length);
console.log(fruits[0]);
console.log(fruits[fruits.length - 1]);

console.clear();
// 3. Looping over an arrary
// print all fruits
// a. for
for(let i=0; i<fruits.length; i++) {
    console.log(fruits[i]);
}

// b. for...of
for(let fruit of fruits) {
    console.log(fruit);
}

// c. forEach
fruits.forEach((fruit) => console.log(fruit));

// 4. Addition, deletion, copy
// push: add an item to the end
fruits.push('üçã', 'ü•ù');
console.log(fruits);

// pop: remove an item from the end
fruits.pop();
fruits.pop();
console.log(fruits);

// unshift: add an item to the beginning
fruits.unshift('üçã', 'ü•ù');
console.log(fruits);

// shift: remove an item from the beginning
fruits.shift();
fruits.shift();
console.log(fruits);

console.clear();
// note! unshift, shift are slower than push, pop
// splice: remove an item by index position
fruits.push('üçã', 'ü•ù');
console.log(fruits);
fruits.splice(1); // 1Î≤àÏß∏ Ïù∏Îç±Ïä§Î∂ÄÌÑ∞ Î™®Îëê ÏÇ≠Ï†ú 
console.log(fruits);

fruits.push('üçá', 'üçã', 'ü•ù');
fruits.splice(1, 1, 'üçå'); // 1Î≤àÏß∏ Ïù∏Îç±Ïä§Î∂ÄÌÑ∞ 1Í∞ú ÏÇ≠Ï†úÌïòÍ≥† Í∑∏ ÏûêÎ¶¨Ïóê Î∞îÎÇòÎÇò ÏÇΩÏûÖ 
console.log(fruits);

// combine two arrays
const fruit2 = ['üçí', 'üçê'];
const newFruits = fruits.concat(fruit2);
console.log(newFruits);

// 5. Searching
// indexof: find the index
console.clear();
console.log(fruits);
console.log(fruits.indexOf('üçã'));
console.log(fruits.indexOf('ü•ù'));

// includes
console.log(fruits.includes('üçí'));
console.log(fruits.includes('üçâ'));

// lastIndexof
fruits.push('üçâ');
console.log(fruits);
console.log(fruits.indexOf('üçâ'));
console.log(fruits.lastIndexOf('üçâ')); // ÏàòÎ∞ïÏùò Í∞ÄÏû• ÎßàÏßÄÎßâ Ïù∏Îç±Ïä§ 

// toString vs toLocaleString
console.clear();
const arr = [1, 2, 3, 4, 5];
console.log(arr.toString());
console.log(arr.toLocaleString());

// reverse
arr.reverse();
console.log(arr);
console.log(arr.slice(1, 4));

// sort
console.clear();
console.log(arr);
arr.sort((a, b) => a - b); // Ïò§Î¶ÑÏ∞®Ïàú Ï†ïÎ†¨ 
console.log(arr);
arr.sort((a, b) => b - a); // ÎÇ¥Î¶ºÏ∞®Ïàú Ï†ïÎ†¨ 
console.log(arr);

// every vs some
function isBigEnough(value) {
    return value < 4;
}

console.log(arr.every(isBigEnough)); // Î∞∞Ïó¥Ïùò Î™®Îì† ÏõêÏÜåÍ∞Ä 4Î≥¥Îã§ ÏûëÏúºÎ©¥ true 
console.log(arr.some(isBigEnough)); // Î∞∞Ïó¥Ïùò Ïñ¥Îñ†Ìïú ÏõêÏÜåÎùºÎèÑ 4Î≥¥Îã§ ÏûëÏúºÎ©¥ true

// map 
// Î∞∞Ïó¥Ïùò Î™®Îì† ÏöîÏÜå Í∞ÅÍ∞ÅÏóê ÎåÄÌïòÏó¨ Ï£ºÏñ¥ÏßÑ Ìï®ÏàòÎ•º Ìò∏Ï∂úÌïú Í≤∞Í≥ºÎ•º Î™®ÏïÑ ÏÉàÎ°úÏö¥ Î∞∞Ïó¥ÏùÑ Î∞òÌôò 
arr.reverse();
const map1 = arr.map(x => x*2); 
console.log(map1);

// filter
// Ï£ºÏñ¥ÏßÑ Ìï®ÏàòÏùò ÌÖåÏä§Ìä∏Î•º ÌÜµÍ≥ºÌïòÎäî Î™®Îì† ÏöîÏÜåÎ•º Î™®ÏïÑ ÏÉàÎ°úÏö¥ Î∞∞Ïó¥ÏùÑ Î∞òÌôò 
const words = ['kitty', 'flower', 'pizza', 'watermelon', 'iphone'];
const newWords = words.filter(word => word.length > 5);
console.log(newWords);

// reduce
// Î∞∞Ïó¥Ïùò Í∞Å ÏöîÏÜåÏóê ÎåÄÌï¥ Ï£ºÏñ¥ÏßÑ reducer Ìï®ÏàòÎ•º Ïã§ÌñâÌïòÍ≥† Í∑∏ Í≤∞Í≥ºÍ∞íÏùÑ Î∞òÌôò 
const reducer = (accmulator, currentValue) => accmulator + currentValue;
console.log(arr.reduce(reducer)); // 15
console.log(arr.reduce(reducer, 5)); // 20